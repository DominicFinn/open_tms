name: Deploy to GCP Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: open-tms

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run backend tests
      run: |
        cd backend
        npm run build
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run build

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Build and push backend
      run: |
        cd backend
        gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-backend:${{ github.sha }} .
        gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-backend:latest .
    
    - name: Deploy backend to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }}-backend \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-backend:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 3001 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars NODE_ENV=production,PORT=3001

  deploy-frontend:
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Get backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-backend --platform managed --region ${{ env.REGION }} --format 'value(status.url)')
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
    
    - name: Build and push frontend
      run: |
        cd frontend
        gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-frontend:${{ github.sha }} .
        gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-frontend:latest .
    
    - name: Deploy frontend to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }}-frontend \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-frontend:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 80 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars VITE_API_URL=${{ steps.backend-url.outputs.url }}

  notify:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi
